-- Create schema
CREATE SCHEMA IF NOT EXISTS DATA_PIPELINE;

-- Create a customer table
CREATE OR REPLACE TABLE DATA_PIPELINE.CUSTOMERS (
    CUSTOMER_ID INT PRIMARY KEY,
    CUSTOMER_NAME STRING,
    EMAIL STRING
);

-- Create a products table
CREATE OR REPLACE TABLE DATA_PIPELINE.PRODUCTS (
    PRODUCT_ID INT PRIMARY KEY,
    PRODUCT_NAME STRING,
    PRICE NUMBER(14, 2)
);

-- Create an orders table
CREATE OR REPLACE TABLE DATA_PIPELINE.ORDERS (
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID INT,
    PRODUCT_ID INT,
    QUANTITY INT,
    ORDER_DATE DATE,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES DATA_PIPELINE.CUSTOMERS(CUSTOMER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES DATA_PIPELINE.PRODUCTS(PRODUCT_ID)
);

-- Create stored procedure to update order record
CREATE OR REPLACE PROCEDURE DATA_PIPELINE.UPDATE_ORDER(
    order_id INT,
    new_quantity INT,
    new_order_date DATE
)
RETURNS STRING
LANGUAGE SQL
AS
'
BEGIN
    -- Check if order exists
    IF NOT EXISTS (SELECT 1 FROM DATA_PIPELINE.ORDERS WHERE ORDER_ID = order_id) THEN
        RETURN ''Error: Order not found';
    END IF;

    -- Update the order record
    UPDATE DATA_PIPELINE.ORDERS
    SET 
        QUANTITY = new_quantity,
        ORDER_DATE = new_order_date
    WHERE ORDER_ID = order_id;

    RETURN ''Order updated successfully'';
END
;