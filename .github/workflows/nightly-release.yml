name: Nightly SQL Draft Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'  # 2AM EST (6AM UTC)

permissions:
  contents: write

jobs:
  create-draft-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: cicd-sql-release

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "action@github.com"

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y

      - name: Detect modified SQL files since main
        id: detect_sqls
        run: |
          set -eo pipefail
          echo "🧠 Detecting new/modified .sql files between main and HEAD..."
        
          git fetch origin main:main  # Ensure main branch is locally available
          git diff --name-status origin/main...HEAD > raw_diff.txt
        
          echo "📄 Raw diff content:"
          cat raw_diff.txt
        
          grep '\.sql$' raw_diff.txt | awk '$1 ~ /^(A|M|R100)$/ { print $2 }' > raw_sql_changes.txt || touch raw_sql_changes.txt
        
          echo "📁 Filtered .sql changes:"
          cat raw_sql_changes.txt || echo "❌ No matching .sql changes"
        
          awk '{ print $1 }' raw_sql_changes.txt > sql_files.txt || touch sql_files.txt
        
          echo "sql_files<<EOF" >> $GITHUB_OUTPUT
          cat sql_files.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        


      - name: Debug detected files
        run: |
          echo "🧾 SQL files detected:"
          cat sql_files.txt || echo "❌ None found"

      - name: Create release notes
        run: |
          echo "📝 Modified SQL Files:" > release_notes.md
          if [ -s sql_files.txt ]; then
            cat sql_files.txt | while read file; do
              echo "- $file" >> release_notes.md
            done
          else
            echo "- No SQL files found" >> release_notes.md
          fi

      - name: Create GitHub Draft Release (no tag)
        env:
          GH_TOKEN: ${{ secrets.HUB_TOKEN }}
        shell: bash
        run: |
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
          curl -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d @- <<EOF
          {
            "tag_name": "nightly-placeholder",
            "name": "Nightly SQL Release - $TIMESTAMP",
            "body": "$(cat release_notes.md)",
            "draft": false,
            "prerelease": false,
            "target_commitish": "cicd-sql-release"
          }
          EOF
